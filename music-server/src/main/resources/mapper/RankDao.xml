<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hxc.music.dao.RankDao">

    <resultMap type="com.hxc.music.entity.Rank" id="RankMap">
        <result property="id" column="id" jdbcType="VARCHAR"/>
        <result property="songlistid" column="songListId" jdbcType="VARCHAR"/>
        <result property="consumerid" column="consumerId" jdbcType="VARCHAR"/>
        <result property="score" column="score" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="RankMap">
        select
          id, songListId, consumerId, score
        from rank
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="RankMap">
        select
        id, songListId, consumerId, score
        from rank
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="songlistid != null">
                and songListId = #{songlistid}
            </if>
            <if test="consumerid != null">
                and consumerId = #{consumerid}
            </if>
            <if test="score != null">
                and score = #{score}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from rank
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="songlistid != null">
                and songListId = #{songlistid}
            </if>
            <if test="consumerid != null">
                and consumerId = #{consumerid}
            </if>
            <if test="score != null">
                and score = #{score}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into rank(songListId, consumerId, score)
        values (#{songlistid}, #{consumerid}, #{score})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into rank(songListId, consumerId, score)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.songlistid}, #{entity.consumerid}, #{entity.score})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into rank(songListId, consumerId, score)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.songlistid}, #{entity.consumerid}, #{entity.score})
        </foreach>
        on duplicate key update
        songListId = values(songListId),
        consumerId = values(consumerId),
        score = values(score)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update rank
        <set>
            <if test="songlistid != null">
                songListId = #{songlistid},
            </if>
            <if test="consumerid != null">
                consumerId = #{consumerid},
            </if>
            <if test="score != null">
                score = #{score},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from rank where id = #{id}
    </delete>

</mapper>

